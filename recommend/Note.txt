User Table
ID pwd

Film Table
name tag1 tag2 ...


User-film-saw Table
usrid filmname socre

Output Table
usrid filmname socre

# user_profile: 某一用户user的画像 user_profile = {'label1':1.1, 'label2': 0.5, 'label3': 0.0, ...}
# items_profiles: 备选推荐节目集的节目画像: items_profiles = {item1:{'label1':1, 'label2': 0, 'label3': 0}, item2:{...}...}
# users_average_scores = {user1:1.2, user2:2.2, user3:4.3,...}
# items_users_saw_scores = {user1:[[item1, 1.1], [item2, 4.1]], user2:...}
# items_dict = {节目一: [[用户一,8], [用户三,7]], 节目二: [...], ... }
# users_dict = {用户一:[['节目一', 3.2], ['节目四', 0.2], ['节目八', 6.5]], 用户二: ... }


ContentBased 需要用户画像和推荐候选的电影的所有画像来计算推荐，大概就是算用户画像和电影画像的距离，推荐与用户画像距离近的电影，同时需要用户看过的电影来不推荐用户看过的电影
UserCF 需要每个电影被用户浏览情况来找到用户相邻者（看过同样电影之人），需要用户数据集（包括用户看过的电影及用户对其评分）来计算用户相邻者相似度，推荐相似用户看过的电影，同时也需要需要用户看过的电影来不推荐用户看过的电影
FindSimilarItems按UserCF类似的方式找到相邻电影
